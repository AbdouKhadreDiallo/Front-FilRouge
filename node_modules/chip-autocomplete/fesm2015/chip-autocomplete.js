import { Injectable, ɵɵdefineInjectable, EventEmitter, Component, ChangeDetectionStrategy, forwardRef, Input, Output, ViewChild, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR, FormBuilder, ReactiveFormsModule } from '@angular/forms';
import { MatAutocomplete, MatAutocompleteModule } from '@angular/material/autocomplete';
import { Subject, timer } from 'rxjs';
import { debounce, distinctUntilChanged } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { MatChipsModule } from '@angular/material/chips';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatIconModule } from '@angular/material/icon';
import { MatSelectModule } from '@angular/material/select';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { MatCheckboxModule } from '@angular/material/checkbox';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/chip-autocomplete.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChipAutocompleteService {
    constructor() { }
}
ChipAutocompleteService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ChipAutocompleteService.ctorParameters = () => [];
/** @nocollapse */ ChipAutocompleteService.ngInjectableDef = ɵɵdefineInjectable({ factory: function ChipAutocompleteService_Factory() { return new ChipAutocompleteService(); }, token: ChipAutocompleteService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * Generated from: lib/chip-autocomplete.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChipAutocompleteComponent {
    /**
     * @param {?} fb
     */
    constructor(fb) {
        this.fb = fb;
        this.placeholder = 'Select';
        this.clientSideFilter = true;
        this.maxItems = null;
        this.removable = true;
        this.required = true;
        this.isOptionString = true;
        this.displayWith = 'value';
        this.itemId = 'key';
        this.disabledSelected = true;
        this.debounceTime = 500;
        this.isChipAddFromInput = false;
        this.isOptionCheckable = false;
        this.changeSearchkey = new EventEmitter();
        this.separatorKeysCodes = [13, 9];
        this.onTouch = (/**
         * @return {?}
         */
        () => { });
        this.onChange = (/**
         * @return {?}
         */
        () => { });
        this.disabled = false;
        this.debounceHelper = new Subject();
        this.isSelected = (/**
         * @param {?} option
         * @return {?}
         */
        (option) => {
            return this.control.value && this.control.value.some((/**
             * @param {?} ctr
             * @return {?}
             */
            ctr => this.isOptionString ? ctr === option : ctr[this.itemId] === option[this.itemId]));
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.changeInput('');
        this.form = this.fb.group({
            control: [''],
        });
        this.form.valueChanges.subscribe((/**
         * @param {?} form
         * @return {?}
         */
        form => {
            setTimeout((/**
             * @return {?}
             */
            () => this.onChange(form.control)), 0);
        }));
        this.debounceHelper.pipe(debounce((/**
         * @return {?}
         */
        () => timer(this.debounceTime))), distinctUntilChanged()).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => this.changeSearchkey.emit(res)));
        if (this.clientSideFilter) {
            if (this.options.some((/**
             * @param {?} option
             * @return {?}
             */
            option => typeof (option) === 'string'))) {
                this.isOptionString = true;
            }
            else {
                this.isOptionString = false;
            }
        }
    }
    /**
     * @return {?}
     */
    get control() {
        return this.form.get('control');
    }
    /**
     * @param {?} event
     * @return {?}
     */
    add(event) {
        if (this.isChipAddFromInput && !this.matAutocomplete.showPanel) {
            /** @type {?} */
            const input = event.input;
            /** @type {?} */
            const value = event.value;
            if (this.isOptionString) {
                if ((value || '').trim()) {
                    this.control.setValue([...this.control.value || [], value.trim()]);
                }
            }
            else {
                /** @type {?} */
                const obj = {};
                obj[this.itemId] = value;
                obj[this.displayWith] = value;
                this.control.setValue([...this.control.value || [], obj]);
            }
            // Reset the input value
            if (input) {
                input.value = '';
            }
        }
    }
    /**
     * @param {?} chip
     * @return {?}
     */
    remove(chip) {
        /** @type {?} */
        const index = this.control.value.findIndex((/**
         * @param {?} ctr
         * @return {?}
         */
        (ctr) => this.isOptionString ? ctr === chip : ctr[this.itemId] === chip[this.itemId]));
        if (index >= 0) {
            this.changeInput();
            this.control.value.splice(index, 1);
            if (this.control.value.length === 0) {
                this.control.setValue(null);
            }
            else {
                this.control.updateValueAndValidity();
            }
            this.disabled = false;
        }
    }
    /**
     * @param {?=} key
     * @return {?}
     */
    changeInput(key = '') {
        this.clientSideFilter ? this.filteredOptions = this.filterOption(key) : this.debounceHelper.next(key);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    filterOption(key) {
        return (key === '') ? this.options : this.options.filter((/**
         * @param {?} f
         * @return {?}
         */
        f => this.isOptionString ? f.toLowerCase().includes(key.toLowerCase()) :
            (f[this.displayWith]).toLowerCase().includes(key.toLowerCase())));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onSelect(value) {
        this.control.setValue([...this.control.value || [], value]);
        this.afterSelect();
    }
    /**
     * @return {?}
     */
    afterSelect() {
        this.input.nativeElement.value = '';
        if (this.maxItems && this.control.value.length === this.maxItems) {
            this.disabled = true;
        }
        this.changeInput();
    }
    /**
     * @param {?} keyCode
     * @return {?}
     */
    chooseFirstOption(keyCode) {
        if (this.matAutocomplete.options.first && (!this.control.value || (this.control.value && !this.control.value.some((/**
         * @param {?} ctr
         * @return {?}
         */
        ctr => this.isOptionString ? ctr === this.matAutocomplete.options.first.value :
            ctr[this.itemId] === this.matAutocomplete.options.first.value[this.itemId]))))) {
            if (keyCode === 'enter') {
                this.matAutocomplete.options.first.select();
            }
            else if (keyCode === 'tab') {
                this.control.setValue([...this.control.value || [], this.matAutocomplete.options.first.value]);
                this.afterSelect();
            }
        }
    }
    /**
     * @param {?} $event
     * @param {?} option
     * @return {?}
     */
    clickCheckboxWrap($event, option) {
        $event.stopPropagation();
        this.toggleSelection(option);
    }
    /**
     * @param {?} option
     * @return {?}
     */
    toggleSelection(option) {
        if (this.isSelected(option)) {
            this.remove(option);
        }
        else {
            if (!this.control.value || !this.maxItems || this.control.value.length < this.maxItems) {
                this.onSelect(option);
            }
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        this.input.nativeElement.value = '';
        this.changeInput();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouch = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        this.control.setValue(val);
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
ChipAutocompleteComponent.decorators = [
    { type: Component, args: [{
                selector: 'chip-autocomplete',
                template: "<form [formGroup]=\"form\" class=\"form\">\n    <mat-form-field class=\"form-element\">\n        <mat-chip-list #chipList formControlName=\"control\" [required]=\"required\">\n            <mat-chip *ngFor=\"let ctr of control.value\" [removable]=\"true\" (removed)=\"remove(ctr)\">\n                {{ isOptionString ? ctr : ctr[displayWith] }}\n                <mat-icon matChipRemove *ngIf=\"removable\">cancel</mat-icon>\n            </mat-chip>\n            <input #input matInput [placeholder]=\"placeholder\" (input)=\"changeInput($event.target.value)\"\n                [matChipInputFor]=\"chipList\" [matAutocomplete]=\"ref\" (matChipInputTokenEnd)=\"add($event)\"\n                [disabled]=\"disabled\" (keyup.enter)=\"chooseFirstOption('enter')\" (keyup.tab)=\"chooseFirstOption('tab')\"\n                (blur)=\"onBlur()\" (focus)=\"changeInput()\" [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\">\n            <mat-autocomplete #ref=\"matAutocomplete\" (optionSelected)=\"onSelect($event.option.value)\">\n                <ng-container *ngIf=\"!isOptionCheckable\">\n                    <mat-option *ngFor=\"let ctr of (clientSideFilter? filteredOptions : (filteredOptions$ | async))\"\n                        [value]=\"ctr\" [disabled]=\"disabledSelected && isSelected(ctr)\">\n                        {{ isOptionString ? ctr : ctr[displayWith] }}\n                    </mat-option>\n                </ng-container>\n                <ng-container *ngIf=\"isOptionCheckable\">\n                    <mat-option class=\"option-checkbox-wrap\" *ngFor=\"let ctr of (clientSideFilter? filteredOptions : (filteredOptions$ | async))\"\n                        [value]=\"ctr\">\n                        <div (click)=\"clickCheckboxWrap($event, ctr)\">\n                            <mat-checkbox [checked]=\"isSelected(ctr)\"\n                                [disabled]=\"!isSelected(ctr) && control.value && maxItems && control.value.length >= maxItems\"\n                                (change)=\"toggleSelection(ctr)\" (click)=\"$event.stopPropagation()\">\n                                {{ isOptionString ? ctr : ctr[displayWith] }}\n                            </mat-checkbox>\n                        </div>\n                    </mat-option>\n                </ng-container>\n            </mat-autocomplete>\n        </mat-chip-list>\n    </mat-form-field>\n</form>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => ChipAutocompleteComponent)),
                        multi: true
                    }
                ],
                styles: [".form{min-width:150px;max-width:500px;width:100%}.form-element{padding:5px 0 25px 40px;width:100%}.mat-option.option-checkbox-wrap{padding:0}.mat-option.option-checkbox-wrap .mat-checkbox{padding:0 16px}.mat-option:first-child{background:rgba(0,0,0,.04)}"]
            }] }
];
/** @nocollapse */
ChipAutocompleteComponent.ctorParameters = () => [
    { type: FormBuilder }
];
ChipAutocompleteComponent.propDecorators = {
    placeholder: [{ type: Input }],
    clientSideFilter: [{ type: Input }],
    options: [{ type: Input }],
    maxItems: [{ type: Input }],
    removable: [{ type: Input }],
    required: [{ type: Input }],
    isOptionString: [{ type: Input }],
    displayWith: [{ type: Input }],
    itemId: [{ type: Input }],
    disabledSelected: [{ type: Input }],
    filteredOptions$: [{ type: Input }],
    debounceTime: [{ type: Input }],
    isChipAddFromInput: [{ type: Input }],
    isOptionCheckable: [{ type: Input }],
    changeSearchkey: [{ type: Output }],
    input: [{ type: ViewChild, args: ['input', { static: false },] }],
    matAutocomplete: [{ type: ViewChild, args: [MatAutocomplete, { static: true },] }]
};
if (false) {
    /** @type {?} */
    ChipAutocompleteComponent.prototype.placeholder;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.clientSideFilter;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.options;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.maxItems;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.removable;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.required;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.isOptionString;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.displayWith;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.itemId;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.disabledSelected;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.filteredOptions$;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.debounceTime;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.isChipAddFromInput;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.isOptionCheckable;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.changeSearchkey;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.input;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.matAutocomplete;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.separatorKeysCodes;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.onTouch;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.onChange;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.form;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.filteredOptions;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.disabled;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.debounceHelper;
    /** @type {?} */
    ChipAutocompleteComponent.prototype.isSelected;
    /**
     * @type {?}
     * @private
     */
    ChipAutocompleteComponent.prototype.fb;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/chip-autocomplete.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChipAutocompleteModule {
}
ChipAutocompleteModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ChipAutocompleteComponent],
                imports: [
                    CommonModule,
                    BrowserAnimationsModule,
                    MatAutocompleteModule,
                    MatCheckboxModule,
                    MatChipsModule,
                    MatFormFieldModule,
                    MatIconModule,
                    MatSelectModule,
                    ReactiveFormsModule
                ],
                exports: [ChipAutocompleteComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: chip-autocomplete.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ChipAutocompleteComponent, ChipAutocompleteModule, ChipAutocompleteService };
//# sourceMappingURL=chip-autocomplete.js.map
