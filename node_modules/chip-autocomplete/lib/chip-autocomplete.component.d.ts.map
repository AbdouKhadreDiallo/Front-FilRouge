{"version":3,"file":"chip-autocomplete.component.d.ts","sources":["chip-autocomplete.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit, ElementRef, EventEmitter } from '@angular/core';\nimport { ControlValueAccessor, FormBuilder, FormGroup } from '@angular/forms';\nimport { MatChipInputEvent } from '@angular/material/chips';\nimport { MatAutocomplete } from '@angular/material/autocomplete';\nimport { Observable, Subject } from 'rxjs';\nexport declare class ChipAutocompleteComponent implements OnInit, ControlValueAccessor {\n    private fb;\n    placeholder: string;\n    clientSideFilter: boolean;\n    options: any[];\n    maxItems: any;\n    removable: boolean;\n    required: boolean;\n    isOptionString: boolean;\n    displayWith: string;\n    itemId: string;\n    disabledSelected: boolean;\n    filteredOptions$: Observable<any>;\n    debounceTime: number;\n    isChipAddFromInput: boolean;\n    isOptionCheckable: boolean;\n    changeSearchkey: EventEmitter<string>;\n    input: ElementRef<HTMLInputElement>;\n    matAutocomplete: MatAutocomplete;\n    separatorKeysCodes: number[];\n    onTouch: any;\n    onChange: any;\n    form: FormGroup;\n    filteredOptions: any;\n    disabled: boolean;\n    debounceHelper: Subject<unknown>;\n    constructor(fb: FormBuilder);\n    ngOnInit(): void;\n    readonly control: import(\"@angular/forms\").AbstractControl;\n    add(event: MatChipInputEvent): void;\n    remove(chip: any): void;\n    changeInput(key?: string): void;\n    filterOption(key: string): any[];\n    onSelect(value: any): void;\n    afterSelect(): void;\n    isSelected: (option: any) => any;\n    chooseFirstOption(keyCode: any): void;\n    clickCheckboxWrap($event: any, option: any): void;\n    toggleSelection(option: any): void;\n    onBlur(): void;\n    registerOnTouched(fn: any): void;\n    registerOnChange(fn: any): void;\n    writeValue(val: string): void;\n    setDisabledState(isDisabled: boolean): void;\n}\n"]}