import { OnInit, ElementRef, EventEmitter } from '@angular/core';
import { ControlValueAccessor, FormBuilder, FormGroup } from '@angular/forms';
import { MatChipInputEvent } from '@angular/material/chips';
import { MatAutocomplete } from '@angular/material/autocomplete';
import { Observable, Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class ChipAutocompleteComponent implements OnInit, ControlValueAccessor {
    private fb;
    placeholder: string;
    clientSideFilter: boolean;
    options: any[];
    maxItems: any;
    removable: boolean;
    required: boolean;
    isOptionString: boolean;
    displayWith: string;
    itemId: string;
    disabledSelected: boolean;
    filteredOptions$: Observable<any>;
    debounceTime: number;
    isChipAddFromInput: boolean;
    isOptionCheckable: boolean;
    changeSearchkey: EventEmitter<string>;
    input: ElementRef<HTMLInputElement>;
    matAutocomplete: MatAutocomplete;
    separatorKeysCodes: number[];
    onTouch: any;
    onChange: any;
    form: FormGroup;
    filteredOptions: any;
    disabled: boolean;
    debounceHelper: Subject<unknown>;
    constructor(fb: FormBuilder);
    ngOnInit(): void;
    readonly control: import("@angular/forms").AbstractControl;
    add(event: MatChipInputEvent): void;
    remove(chip: any): void;
    changeInput(key?: string): void;
    filterOption(key: string): any[];
    onSelect(value: any): void;
    afterSelect(): void;
    isSelected: (option: any) => any;
    chooseFirstOption(keyCode: any): void;
    clickCheckboxWrap($event: any, option: any): void;
    toggleSelection(option: any): void;
    onBlur(): void;
    registerOnTouched(fn: any): void;
    registerOnChange(fn: any): void;
    writeValue(val: string): void;
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ChipAutocompleteComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ChipAutocompleteComponent, "chip-autocomplete", never, { "placeholder": "placeholder"; "clientSideFilter": "clientSideFilter"; "maxItems": "maxItems"; "removable": "removable"; "required": "required"; "isOptionString": "isOptionString"; "displayWith": "displayWith"; "itemId": "itemId"; "disabledSelected": "disabledSelected"; "debounceTime": "debounceTime"; "isChipAddFromInput": "isChipAddFromInput"; "isOptionCheckable": "isOptionCheckable"; "options": "options"; "filteredOptions$": "filteredOptions$"; }, { "changeSearchkey": "changeSearchkey"; }, never, never>;
}

//# sourceMappingURL=chip-autocomplete.component.d.ts.map