(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/material/autocomplete'), require('rxjs'), require('rxjs/operators'), require('@angular/common'), require('@angular/material/chips'), require('@angular/material/form-field'), require('@angular/material/icon'), require('@angular/material/select'), require('@angular/platform-browser/animations'), require('@angular/material/checkbox')) :
    typeof define === 'function' && define.amd ? define('chip-autocomplete', ['exports', '@angular/core', '@angular/forms', '@angular/material/autocomplete', 'rxjs', 'rxjs/operators', '@angular/common', '@angular/material/chips', '@angular/material/form-field', '@angular/material/icon', '@angular/material/select', '@angular/platform-browser/animations', '@angular/material/checkbox'], factory) :
    (global = global || self, factory(global['chip-autocomplete'] = {}, global.ng.core, global.ng.forms, global.ng.material.autocomplete, global.rxjs, global.rxjs.operators, global.ng.common, global.ng.material.chips, global.ng.material['form-field'], global.ng.material.icon, global.ng.material.select, global.ng.platformBrowser.animations, global.ng.material.checkbox));
}(this, (function (exports, core, forms, autocomplete, rxjs, operators, common, chips, formField, icon, select, animations, checkbox) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/chip-autocomplete.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ChipAutocompleteService = /** @class */ (function () {
        function ChipAutocompleteService() {
        }
        ChipAutocompleteService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ChipAutocompleteService.ctorParameters = function () { return []; };
        /** @nocollapse */ ChipAutocompleteService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function ChipAutocompleteService_Factory() { return new ChipAutocompleteService(); }, token: ChipAutocompleteService, providedIn: "root" });
        return ChipAutocompleteService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/chip-autocomplete.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ChipAutocompleteComponent = /** @class */ (function () {
        function ChipAutocompleteComponent(fb) {
            var _this = this;
            this.fb = fb;
            this.placeholder = 'Select';
            this.clientSideFilter = true;
            this.maxItems = null;
            this.removable = true;
            this.required = true;
            this.isOptionString = true;
            this.displayWith = 'value';
            this.itemId = 'key';
            this.disabledSelected = true;
            this.debounceTime = 500;
            this.isChipAddFromInput = false;
            this.isOptionCheckable = false;
            this.changeSearchkey = new core.EventEmitter();
            this.separatorKeysCodes = [13, 9];
            this.onTouch = (/**
             * @return {?}
             */
            function () { });
            this.onChange = (/**
             * @return {?}
             */
            function () { });
            this.disabled = false;
            this.debounceHelper = new rxjs.Subject();
            this.isSelected = (/**
             * @param {?} option
             * @return {?}
             */
            function (option) {
                return _this.control.value && _this.control.value.some((/**
                 * @param {?} ctr
                 * @return {?}
                 */
                function (ctr) {
                    return _this.isOptionString ? ctr === option : ctr[_this.itemId] === option[_this.itemId];
                }));
            });
        }
        /**
         * @return {?}
         */
        ChipAutocompleteComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.changeInput('');
            this.form = this.fb.group({
                control: [''],
            });
            this.form.valueChanges.subscribe((/**
             * @param {?} form
             * @return {?}
             */
            function (form) {
                setTimeout((/**
                 * @return {?}
                 */
                function () { return _this.onChange(form.control); }), 0);
            }));
            this.debounceHelper.pipe(operators.debounce((/**
             * @return {?}
             */
            function () { return rxjs.timer(_this.debounceTime); })), operators.distinctUntilChanged()).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) { return _this.changeSearchkey.emit(res); }));
            if (this.clientSideFilter) {
                if (this.options.some((/**
                 * @param {?} option
                 * @return {?}
                 */
                function (option) { return typeof (option) === 'string'; }))) {
                    this.isOptionString = true;
                }
                else {
                    this.isOptionString = false;
                }
            }
        };
        Object.defineProperty(ChipAutocompleteComponent.prototype, "control", {
            get: /**
             * @return {?}
             */
            function () {
                return this.form.get('control');
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} event
         * @return {?}
         */
        ChipAutocompleteComponent.prototype.add = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (this.isChipAddFromInput && !this.matAutocomplete.showPanel) {
                /** @type {?} */
                var input = event.input;
                /** @type {?} */
                var value = event.value;
                if (this.isOptionString) {
                    if ((value || '').trim()) {
                        this.control.setValue(__spread(this.control.value || [], [value.trim()]));
                    }
                }
                else {
                    /** @type {?} */
                    var obj = {};
                    obj[this.itemId] = value;
                    obj[this.displayWith] = value;
                    this.control.setValue(__spread(this.control.value || [], [obj]));
                }
                // Reset the input value
                if (input) {
                    input.value = '';
                }
            }
        };
        /**
         * @param {?} chip
         * @return {?}
         */
        ChipAutocompleteComponent.prototype.remove = /**
         * @param {?} chip
         * @return {?}
         */
        function (chip) {
            var _this = this;
            /** @type {?} */
            var index = this.control.value.findIndex((/**
             * @param {?} ctr
             * @return {?}
             */
            function (ctr) {
                return _this.isOptionString ? ctr === chip : ctr[_this.itemId] === chip[_this.itemId];
            }));
            if (index >= 0) {
                this.changeInput();
                this.control.value.splice(index, 1);
                if (this.control.value.length === 0) {
                    this.control.setValue(null);
                }
                else {
                    this.control.updateValueAndValidity();
                }
                this.disabled = false;
            }
        };
        /**
         * @param {?=} key
         * @return {?}
         */
        ChipAutocompleteComponent.prototype.changeInput = /**
         * @param {?=} key
         * @return {?}
         */
        function (key) {
            if (key === void 0) { key = ''; }
            this.clientSideFilter ? this.filteredOptions = this.filterOption(key) : this.debounceHelper.next(key);
        };
        /**
         * @param {?} key
         * @return {?}
         */
        ChipAutocompleteComponent.prototype.filterOption = /**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            var _this = this;
            return (key === '') ? this.options : this.options.filter((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                return _this.isOptionString ? f.toLowerCase().includes(key.toLowerCase()) :
                    (f[_this.displayWith]).toLowerCase().includes(key.toLowerCase());
            }));
        };
        /**
         * @param {?} value
         * @return {?}
         */
        ChipAutocompleteComponent.prototype.onSelect = /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.control.setValue(__spread(this.control.value || [], [value]));
            this.afterSelect();
        };
        /**
         * @return {?}
         */
        ChipAutocompleteComponent.prototype.afterSelect = /**
         * @return {?}
         */
        function () {
            this.input.nativeElement.value = '';
            if (this.maxItems && this.control.value.length === this.maxItems) {
                this.disabled = true;
            }
            this.changeInput();
        };
        /**
         * @param {?} keyCode
         * @return {?}
         */
        ChipAutocompleteComponent.prototype.chooseFirstOption = /**
         * @param {?} keyCode
         * @return {?}
         */
        function (keyCode) {
            var _this = this;
            if (this.matAutocomplete.options.first && (!this.control.value || (this.control.value && !this.control.value.some((/**
             * @param {?} ctr
             * @return {?}
             */
            function (ctr) {
                return _this.isOptionString ? ctr === _this.matAutocomplete.options.first.value :
                    ctr[_this.itemId] === _this.matAutocomplete.options.first.value[_this.itemId];
            }))))) {
                if (keyCode === 'enter') {
                    this.matAutocomplete.options.first.select();
                }
                else if (keyCode === 'tab') {
                    this.control.setValue(__spread(this.control.value || [], [this.matAutocomplete.options.first.value]));
                    this.afterSelect();
                }
            }
        };
        /**
         * @param {?} $event
         * @param {?} option
         * @return {?}
         */
        ChipAutocompleteComponent.prototype.clickCheckboxWrap = /**
         * @param {?} $event
         * @param {?} option
         * @return {?}
         */
        function ($event, option) {
            $event.stopPropagation();
            this.toggleSelection(option);
        };
        /**
         * @param {?} option
         * @return {?}
         */
        ChipAutocompleteComponent.prototype.toggleSelection = /**
         * @param {?} option
         * @return {?}
         */
        function (option) {
            if (this.isSelected(option)) {
                this.remove(option);
            }
            else {
                if (!this.control.value || !this.maxItems || this.control.value.length < this.maxItems) {
                    this.onSelect(option);
                }
            }
        };
        /**
         * @return {?}
         */
        ChipAutocompleteComponent.prototype.onBlur = /**
         * @return {?}
         */
        function () {
            this.input.nativeElement.value = '';
            this.changeInput();
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ChipAutocompleteComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onTouch = fn;
        };
        /**
         * @param {?} fn
         * @return {?}
         */
        ChipAutocompleteComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
        function (fn) {
            this.onChange = fn;
        };
        /**
         * @param {?} val
         * @return {?}
         */
        ChipAutocompleteComponent.prototype.writeValue = /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.control.setValue(val);
        };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        ChipAutocompleteComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
        function (isDisabled) {
            this.disabled = isDisabled;
        };
        ChipAutocompleteComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'chip-autocomplete',
                        template: "<form [formGroup]=\"form\" class=\"form\">\n    <mat-form-field class=\"form-element\">\n        <mat-chip-list #chipList formControlName=\"control\" [required]=\"required\">\n            <mat-chip *ngFor=\"let ctr of control.value\" [removable]=\"true\" (removed)=\"remove(ctr)\">\n                {{ isOptionString ? ctr : ctr[displayWith] }}\n                <mat-icon matChipRemove *ngIf=\"removable\">cancel</mat-icon>\n            </mat-chip>\n            <input #input matInput [placeholder]=\"placeholder\" (input)=\"changeInput($event.target.value)\"\n                [matChipInputFor]=\"chipList\" [matAutocomplete]=\"ref\" (matChipInputTokenEnd)=\"add($event)\"\n                [disabled]=\"disabled\" (keyup.enter)=\"chooseFirstOption('enter')\" (keyup.tab)=\"chooseFirstOption('tab')\"\n                (blur)=\"onBlur()\" (focus)=\"changeInput()\" [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\">\n            <mat-autocomplete #ref=\"matAutocomplete\" (optionSelected)=\"onSelect($event.option.value)\">\n                <ng-container *ngIf=\"!isOptionCheckable\">\n                    <mat-option *ngFor=\"let ctr of (clientSideFilter? filteredOptions : (filteredOptions$ | async))\"\n                        [value]=\"ctr\" [disabled]=\"disabledSelected && isSelected(ctr)\">\n                        {{ isOptionString ? ctr : ctr[displayWith] }}\n                    </mat-option>\n                </ng-container>\n                <ng-container *ngIf=\"isOptionCheckable\">\n                    <mat-option class=\"option-checkbox-wrap\" *ngFor=\"let ctr of (clientSideFilter? filteredOptions : (filteredOptions$ | async))\"\n                        [value]=\"ctr\">\n                        <div (click)=\"clickCheckboxWrap($event, ctr)\">\n                            <mat-checkbox [checked]=\"isSelected(ctr)\"\n                                [disabled]=\"!isSelected(ctr) && control.value && maxItems && control.value.length >= maxItems\"\n                                (change)=\"toggleSelection(ctr)\" (click)=\"$event.stopPropagation()\">\n                                {{ isOptionString ? ctr : ctr[displayWith] }}\n                            </mat-checkbox>\n                        </div>\n                    </mat-option>\n                </ng-container>\n            </mat-autocomplete>\n        </mat-chip-list>\n    </mat-form-field>\n</form>",
                        changeDetection: core.ChangeDetectionStrategy.OnPush,
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef((/**
                                 * @return {?}
                                 */
                                function () { return ChipAutocompleteComponent; })),
                                multi: true
                            }
                        ],
                        styles: [".form{min-width:150px;max-width:500px;width:100%}.form-element{padding:5px 0 25px 40px;width:100%}.mat-option.option-checkbox-wrap{padding:0}.mat-option.option-checkbox-wrap .mat-checkbox{padding:0 16px}.mat-option:first-child{background:rgba(0,0,0,.04)}"]
                    }] }
        ];
        /** @nocollapse */
        ChipAutocompleteComponent.ctorParameters = function () { return [
            { type: forms.FormBuilder }
        ]; };
        ChipAutocompleteComponent.propDecorators = {
            placeholder: [{ type: core.Input }],
            clientSideFilter: [{ type: core.Input }],
            options: [{ type: core.Input }],
            maxItems: [{ type: core.Input }],
            removable: [{ type: core.Input }],
            required: [{ type: core.Input }],
            isOptionString: [{ type: core.Input }],
            displayWith: [{ type: core.Input }],
            itemId: [{ type: core.Input }],
            disabledSelected: [{ type: core.Input }],
            filteredOptions$: [{ type: core.Input }],
            debounceTime: [{ type: core.Input }],
            isChipAddFromInput: [{ type: core.Input }],
            isOptionCheckable: [{ type: core.Input }],
            changeSearchkey: [{ type: core.Output }],
            input: [{ type: core.ViewChild, args: ['input', { static: false },] }],
            matAutocomplete: [{ type: core.ViewChild, args: [autocomplete.MatAutocomplete, { static: true },] }]
        };
        return ChipAutocompleteComponent;
    }());
    if (false) {
        /** @type {?} */
        ChipAutocompleteComponent.prototype.placeholder;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.clientSideFilter;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.options;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.maxItems;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.removable;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.required;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.isOptionString;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.displayWith;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.itemId;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.disabledSelected;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.filteredOptions$;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.debounceTime;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.isChipAddFromInput;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.isOptionCheckable;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.changeSearchkey;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.input;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.matAutocomplete;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.separatorKeysCodes;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.onTouch;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.onChange;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.form;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.filteredOptions;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.disabled;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.debounceHelper;
        /** @type {?} */
        ChipAutocompleteComponent.prototype.isSelected;
        /**
         * @type {?}
         * @private
         */
        ChipAutocompleteComponent.prototype.fb;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/chip-autocomplete.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ChipAutocompleteModule = /** @class */ (function () {
        function ChipAutocompleteModule() {
        }
        ChipAutocompleteModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [ChipAutocompleteComponent],
                        imports: [
                            common.CommonModule,
                            animations.BrowserAnimationsModule,
                            autocomplete.MatAutocompleteModule,
                            checkbox.MatCheckboxModule,
                            chips.MatChipsModule,
                            formField.MatFormFieldModule,
                            icon.MatIconModule,
                            select.MatSelectModule,
                            forms.ReactiveFormsModule
                        ],
                        exports: [ChipAutocompleteComponent]
                    },] }
        ];
        return ChipAutocompleteModule;
    }());

    exports.ChipAutocompleteComponent = ChipAutocompleteComponent;
    exports.ChipAutocompleteModule = ChipAutocompleteModule;
    exports.ChipAutocompleteService = ChipAutocompleteService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=chip-autocomplete.umd.js.map
